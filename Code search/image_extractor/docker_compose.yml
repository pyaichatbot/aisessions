version: '3.8'

services:
  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.20.0-community
    container_name: neo4j-graph-db
    restart: unless-stopped
    environment:
      - NEO4J_AUTH=neo4j/enterprise123
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - diagram_network
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p enterprise123 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Architecture Diagram Extractor
  diagram_extractor:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: diagram-extractor
    restart: unless-stopped
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=enterprise123
      - NEO4J_DB=neo4j
      - PYTHONPATH=/app
      - TESSDATA_PREFIX=/usr/share/tesseract-ocr/4.00/tessdata
    volumes:
      # Mount directories for input/output
      - ./input:/app/input:ro
      - ./output:/app/output
      - ./logs:/app/logs
      # Mount additional tessdata if needed
      - tessdata_volume:/usr/share/tesseract-ocr/4.00/tessdata
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - diagram_network
    command: ["tail", "-f", "/dev/null"]  # Keep container running for interactive use

  # Optional: Redis for caching OCR results
  redis:
    image: redis:7.2-alpine
    container_name: redis-cache
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - diagram_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Jupyter notebook for analysis
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jupyter-analysis
    restart: unless-stopped
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=enterprise123
      - JUPYTER_ENABLE_LAB=yes
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/app/notebooks
      - ./input:/app/input:ro
      - ./output:/app/output
    depends_on:
      - neo4j
      - diagram_extractor
    networks:
      - diagram_network
    command: >
      bash -c "pip install jupyterlab &&
               jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root 
               --NotebookApp.token='' --NotebookApp.password=''"

  # Optional: Web API service
  web_api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: diagram-api
    restart: unless-stopped
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=enterprise123
      - FLASK_ENV=production
      - FLASK_APP=api.py
    ports:
      - "8000:8000"
    volumes:
      - ./input:/app/input
      - ./output:/app/output
      - ./logs:/app/logs
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - diagram_network
    command: >
      bash -c "pip install flask flask-cors gunicorn &&
               gunicorn --bind 0.0.0.0:8000 --workers 2 --timeout 300 api:app"

# Named volumes
volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  redis_data:
    driver: local
  tessdata_volume:
    driver: local

# Networks
networks:
  diagram_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16